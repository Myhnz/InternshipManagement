@model InternshipManagement.Models.Company

@using (Html.BeginForm("CreateCompany", "Admin", FormMethod.Post, new { id = "createCompanyForm", @enctype = "multipart/form-data" }))
{
    <div class="modal-header">
        <h5 class="modal-title" id="createCompanyModalLabel">Tạo Công Ty</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                <label class="control-label">Tên công ty</label>
                @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                <label class="control-label">Địa chỉ</label>
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>

            <div class="row">
                <div class="form-group col-md-6">
                    <label class="control-label">Số điện thoại</label>
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-6">
                    <label class="control-label">Email</label>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label">Logo</label>
                <div class="custom-file">
                    <input type="file" class="custom-file-input" id="logoCompany" name="logoCompany" accept="image/*" onchange="previewImage(this)">
                    <label class="custom-file-label" for="logoCompany">Chọn tệp</label>
                </div>
                <small class="form-text text-muted">Chấp nhận tệp hình ảnh</small>
                <div id="logoCompanyError" class="text-danger"></div>

                @Html.ValidationMessage("logoCompany", "", new { @class = "text-danger" })
            </div>

            <img id="preview" src="#" alt="Preview" style="display: none; max-width: 50px; max-height: 50px;" />

            <script>
                document.getElementById('logoCompany').addEventListener('change', function (e) {
                    var fileName = e.target.files[0].name;
                    var label = document.querySelector('.custom-file-label');
                    label.textContent = fileName;
                });
                function previewImage(input) {
                    if (input.files && input.files[0]) {
                        var reader = new FileReader();

                        reader.onload = function (e) {
                            $('#preview').attr('src', e.target.result);
                            $('#preview').show();
                        }

                        reader.readAsDataURL(input.files[0]);
                    }
                }
            </script>
        </div>

    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
        <button type="submit" value="Create" class="btn btn-primary" id="createCompanyButton">Tạo công ty</button>
    </div>
}

<script>

    $('#createCompanyForm').submit(function (e) {

        e.preventDefault();
        var fieldsToCheck = ["CompanyName", "Email", "Phone", "Address"];

        var formData = $(this).serialize();
        var company = {};
        $(this).serializeArray().map(function (x) { company[x.name] = x.value; });

        $.ajax({
            url: '@Url.Action("CheckErrors")',
            type: 'POST',
            data: { formData: company, fieldsToCheck: fieldsToCheck },
            success: function (response) {
                $('.text-danger').text('');
                $('.form-control').removeClass('is-invalid');

                $.each(response, function (key, value) {
                    $('[name="' + key + '"]').addClass('is-invalid').next('.text-danger').text(value);
                });

                if ($.isEmptyObject(response)) {
                    var fileInput = document.getElementById('logoCompany');
                    var file = fileInput.files[0];

                    // Kiểm tra xem tệp đã được chọn chưa
                    if (!file) {
                        $('#logoCompanyError').text('Vui lòng chọn một tệp ảnh.');
                        return false;
                    }

                    // Kiểm tra định dạng ảnh
                    var allowedExtensions = /(\.jpg|\.jpeg|\.png|\.gif)$/i;
                    if (!allowedExtensions.exec(file.name)) {
                        $('#logoCompanyError').text('Vui lòng chỉ chọn file ảnh có định dạng JPG, JPEG, PNG hoặc GIF.');
                        return false;
                    }

                    // Kiểm tra kích thước ảnh
                    var maxSize = 10 * 1024 * 1024; // 10MB
                    if (file.size > maxSize) {
                        $('#logoCompanyError').text('Vui lòng chỉ chọn file ảnh có kích thước nhỏ hơn 10MB.');
                        return false;
                    }

                    // Nếu tất cả các điều kiện được kiểm tra đều đúng, thì submit form
                    $('#createCompanyForm').unbind('submit').submit();
                }
            },
        });

    });
</script>
