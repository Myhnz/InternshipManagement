@model InternshipManagement.Models.User


@using (Html.BeginForm("CreateUserAccount", "Admin", FormMethod.Post, new { id = "createUserForm", @enctype = "multipart/form-data" }))
{
    <div class="modal-header">
        <h5 class="modal-title" id="createUserModalLabel">Tạo Tài Khoản</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="row">
                <div class="form-group col-md-6">
                    <label class="control-label">Họ đệm: </label>
                    <div>
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-6">
                    <label class="control-label">Tên: </label>
                    <div>
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="form-group col-md-6">
                    <label class="control-label">Tên đăng nhập: </label>
                    <div>
                        @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-6">
                    <label class="control-label">Mật khẩu: </label>
                    <div>
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", type = "password" } })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label">Email: </label>
                <div>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control"} })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label">Vai trò: </label>
                <div>
                    @Html.DropDownList("RoleID", ViewBag.Roles as SelectList, "Chọn vai trò", new { @class = "form-control", id = "roleDropdown" })
                    @Html.ValidationMessage("RoleID", "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" id="companyDropdownContainer" style="display:none;">
                <label class="control-label">Công ty: </label>
                <div>
                    @Html.DropDownList("CompanyID", ViewBag.Companies as SelectList, "Chọn công ty ", new { @class = "form-control", id = "companyDropdown" })
                    @Html.ValidationMessage("CompanyID", "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
        <!-- Button to submit edited user data -->
        <button type="submit" value="Save" class="btn btn-primary" id="saveChangesButton">Tạo tài khoản</button>
    </div>
}

<script>
    $(document).ready(function () {
        $('#roleDropdown').change(function () {
            if ($(this).val() == "2") {
                $('#companyDropdownContainer').show();
                $('#companyDropdown').prop('required', true); // Make company dropdown required
            } else {
                $('#companyDropdownContainer').hide();
                $('#companyDropdown').prop('required', false); // Remove required attribute
                $('#companyDropdown').val(''); // Reset dropdown value
            }
        });
    });
    $('#createUserForm').submit(function (e) {
    // Ngăn chặn hành động mặc định của form
    e.preventDefault();

    // Lấy danh sách các trường cần kiểm tra lỗi
        var fieldsToCheck = ["LastName", "Username", "FirstName", "Password", "RoleID", "Email"];



      // Lấy dữ liệu từ form
      var formData = $(this).serialize();

      // Tạo đối tượng user từ dữ liệu form
      var user = {};
      $(this).serializeArray().map(function (x) { user[x.name] = x.value; });

    // Gửi dữ liệu đến action để kiểm tra lỗi
    $.ajax({
        url: '@Url.Action("CheckErrors")',
        type: 'POST',
        data: { formData: user, fieldsToCheck: fieldsToCheck },
        success: function (response) {
            // Xóa tất cả thông báo lỗi hiện có
            $('.text-danger').text('');
            $('.form-control').removeClass('is-invalid');

            // Hiển thị các thông báo lỗi mới
            $.each(response, function (key, value) {
                $('[name="' + key + '"]').addClass('is-invalid').next('.text-danger').text(value);
            });

            // Nếu không có lỗi, tiến hành submit form
            if ($.isEmptyObject(response)) {
                $('#createUserForm').unbind('submit').submit();
            }
        }
    });
});

</script>
