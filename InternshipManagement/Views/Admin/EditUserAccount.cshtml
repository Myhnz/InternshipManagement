@model InternshipManagement.Models.User





<div class="modal-header">
    <h5 class="modal-title" id="editUserModalLabel">Chỉnh sửa người dùng</h5>
    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>

@using (Html.BeginForm("EditUserAccount", "Admin", FormMethod.Post, new { id = "editUserForm" }))
{
    @Html.AntiForgeryToken()
    <div class="modal-body">
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.UserID)

            <div class="row">
                <div class="form-group col-md-6">
                    <label class="control-label">Họ đệm</label>
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-6">
                    <label class="control-label">Tên</label>
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="form-group col-md-6">
                    <label class="control-label">Ngày sinh</label>
                    @Html.TextBoxFor(model => model.DateOfBirth, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })

                    @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                </div>



                <div class="form-group col-md-6">
                    <label class="control-label">Giới tính</label>
                    @Html.DropDownListFor(model => model.Gender, new SelectList(new[]
                    {
                        new SelectListItem { Text = "Nam", Value = "Nam" },
                        new SelectListItem { Text = "Nữ", Value = "Nữ" }
                    }, "Value", "Text"), "Chọn giới tính", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label">Địa chỉ</label>
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>


            <div class="row">
                <div class="form-group col-md-6">
                    <label class="control-label">Email</label>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-6">
                    <label class="control-label">Điện thoại</label>
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
        <!-- Button to submit edited user data -->
        <button type="submit" value="Save" class="btn btn-primary" id="saveChangesButton">Lưu thay đổi</button>
    </div>
}


<script>

 $(document).ready(function () {
     $('#editUserForm').on('submit', function (e) {
         e.preventDefault();

         var fieldsToCheck = ["FirstName", "LastName", "Email", "Phone", "Address", "Gender", "DateOfBirth"];
         var formData = $(this).serialize();
         var company = {};
         $(this).serializeArray().map(function (x) { company[x.name] = x.value; });

         $.ajax({
             url: '@Url.Action("CheckErrors")',
             type: 'POST',
             data: { formData: company, fieldsToCheck: fieldsToCheck },
             success: function (response) {
                 $('.text-danger').text('');
                 $('.form-control').removeClass('is-invalid');

                 $.each(response, function (key, value) {
                     $('[name="' + key + '"]').addClass('is-invalid').next('.text-danger').text(value);
                 });

                 if ($.isEmptyObject(response)) {
                     $('#editUserForm').unbind('submit').submit();
                 }
             }
         });
     });
 });

</script>

